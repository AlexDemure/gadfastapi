workdir = ""

folders = []

# Endpoints
[[files]]
mode = "a"
path = "src/endpoints/http/openapi/__init__.py"
content = """
from .{{module.snake.many}} import router as {{module.snake.many}}_router

router.include_router({{module.snake.many}}_router, tags=["{{module.pascal.many}}"])
"""

[[files]]
path = "src/endpoints/http/openapi/{{module.snake.many}}/__init__.py"
content = """
from .routers import router
"""

[[files]]
path = "src/endpoints/http/openapi/{{module.snake.many}}/routers.py"
content = """
from fastapi import Body
from fastapi import Path
from fastapi import status
from gadfastopenapi.extensions.errors import openapi_errors

from src.domain import exceptions
from src.domain import services
from src.endpoints.http.const import tags
from fastapi import APIRouter

from .schemas import Search
from .schemas import {{module.pascal.single}}
from .schemas import {{module.pascal.many}}

router = APIRouter()

@router.get(
  "/{{module.kebab.many}}:{id:int}",
  summary=tags.OPENAPI,
  status_code=status.HTTP_200_OK,
  response_model={{module.pascal.single}},
  responses=openapi_errors(exceptions.{{module.pascal.single}}NotFoundError)
)
async def get({{module.snake.single}}_id: int = Path(..., ge=1, alias="id")) -> {{module.pascal.single}}:
    {{module.snake.single}} = await services.{{module.pascal.single}}.page({{module.snake.single}}_id)
    return {{module.pascal.single}}.serialize({{module.snake.single}})

@router.post(
    "/{{module.kebab.many}}:search",
    summary=tags.OPENAPI,
    status_code=status.HTTP_200_OK,
    response_model={{module.pascal.many}},
)
async def search(body: Search = Body(...)) -> {{module.pascal.many}}:
    {{module.snake.many}}, total = await services.{{module.pascal.single}}.search(**body.deserialize())
    return {{module.pascal.many}}.serialize({{module.snake.many}}, total)
"""

[[files]]
path = "src/endpoints/http/openapi/{{module.snake.many}}/schemas.py"
content = """
import pydantic
import typing

from src.domain import models
from src.endpoints.http.schemas import Paginated
from src.endpoints.http.schemas import Pagination

class Search(pydantic.BaseModel):
    class Filter(pydantic.BaseModel):
        ...

    class Sorting(pydantic.BaseModel):
        field: typing.Literal["id"]
        type: typing.Literal["asc", "desc"]

    filters: Filter
    sorting: Sorting
    pagination: Pagination

    def deserialize(self) -> dict:
        return dict(
            filters=dict(self.filters),
            sorting=dict(self.sorting),
            pagination=self.pagination.deserialize,
        )


class {{module.pascal.single}}(pydantic.BaseModel):
    id: int

    @classmethod
    def serialize(cls, model: models.{{module.pascal.single}}) -> Self:
        return cls(id=model.id)


class {{module.pascal.many}}(Paginated):
    items: list[{{module.pascal.single}}]

    @classmethod
    def serialize(cls, models: list[models.{{module.pascal.single}}], total: int) -> Self:
        return cls(items=[{{module.pascal.single}}.serialize(model) for model in models], total=total)
"""

[[files]]
mode = "a"
path = "src/endpoints/http/systemapi/__init__.py"
content = """
from .{{module.snake.many}} import router as {{module.snake.many}}_router

router.include_router({{module.snake.many}}_router, tags=["{{module.pascal.many}}"])
"""

[[files]]
path = "src/endpoints/http/systemapi/{{module.snake.many}}/routers.py"
content = """
from fastapi import APIRouter
from fastapi import Body
from fastapi import Depends
from fastapi import Path
from fastapi import status
from fastapi import Response
from gadfastopenapi.extensions.errors import openapi_errors

from src.domain import exceptions
from src.domain import services
from src.endpoints.http.const import tags
from src.endpoints.http.schemas import ID

from .schemas import {{module.pascal.single}}
from .schemas import Create{{module.pascal.single}}
from .schemas import Update{{module.pascal.single}}

router = APIRouter()

@router.post(
    "/{{module.kebab.many}}",
    summary=tags.SYSTEMAPI,
    status_code=status.HTTP_201_CREATED,
    response_model=ID,
    responses=openapi_errors(exceptions.{{module.pascal.single}}AlreadyExistsError),
)
async def create(body: Create{{module.pascal.single}} = Body(...)) -> ID:
    {{module.snake.single}} = await services.{{module.pascal.single}}.create({{module.snake.single}}_id=body.id)
    return ID.serialize({{module.snake.single}})

@router.get(
    "/{{module.kebab.many}}:{id:int}",
    summary=tags.SYSTEMAPI,
    status_code=status.HTTP_200_OK,
    response_model={{module.pascal.single}},
    responses=openapi_errors(exceptions.{{module.pascal.single}}NotFoundError),
)
async def get({{module.snake.single}}_id: int = Path(..., ge=1, alias="id")) -> {{module.pascal.single}}:
    return await services.{{module.pascal.single}}.page({{module.snake.single}}_id)

@router.put(
    "/{{module.kebab.many}}:{id:int}",
    summary=tags.SYSTEMAPI,
    status_code=status.HTTP_204_NO_CONTENT,
    response_class=Response,
    responses=openapi_errors(exceptions.{{module.pascal.single}}NotFoundError),
)
async def update(body: Update{{module.pascal.single}} = Body(...)) -> None:
    await services.{{module.pascal.single}}.update(**body.dict())

@router.delete(
    "/{{module.kebab.many}}:{id:int}",
    summary=tags.SYSTEMAPI,
    status_code=status.HTTP_204_NO_CONTENT,
    response_class=Response,
    responses=openapi_errors(exceptions.{{module.pascal.single}}NotFoundError),
)
async def delete({{module.snake.single}}_id: int = Path(..., ge=1, alias="id")) -> None:
    return await services.{{module.pascal.single}}.delete({{module.snake.single}}_id)
"""

[[files]]
path = "src/endpoints/http/systemapi/{{module.snake.many}}/schemas.py"
content = """
import pydantic

from src.domain import models

class Create{{module.pascal.single}}(pydantic.BaseModel):
    id: int

class Update{{module.pascal.single}}(pydantic.BaseModel):
    id: int

class {{module.pascal.single}}(models.{{module.pascal.single}}):
    ...
"""

[[files]]
path = "src/endpoints/http/systemapi/{{module.snake.many}}/__init__.py"
content = """
from .routers import router
"""

[[files]]
path = "src/domain/collections/exceptions/{{module.snake.many}}.py"
content = """
from gadfastopenapi.extensions.errors import APIError

class {{module.pascal.single}}NotFoundError(APIError): ...

class {{module.pascal.single}}AlreadyExistsError(APIError): ...
"""

[[files]]
mode = "a"
path = "src/domain/collections/exceptions/__init__.py"
content = """
from .{{module.snake.many}} import *
"""

[[files]]
path = "src/domain/models/{{module.snake.many}}.py"
content = """
import typing

from .base import Model

class {{module.pascal.single}}(Model):
    id: int

    @classmethod
    def init(cls, id: int) -> typing.Self:
        return cls(id=id)
"""

[[files]]
mode = "a"
path = "src/domain/models/__init__.py"
content = """
from .{{module.snake.many}} import {{module.pascal.single}}
"""

[[files]]
path = "src/domain/repositories/{{module.snake.many}}.py"
content = """
from src.databases import Session
from src.databases import postgres
from src.domain import exceptions
from src.domain import models

from .base import Repository

class {{module.pascal.single}}(Repository):
  orm = postgres.{{module.pascal.single}}
  model = models.{{module.pascal.single}}
  error = exceptions.{{module.pascal.single}}NotFoundError
"""

[[files]]
mode = "a"
path = "src/domain/repositories/__init__.py"
content = """
from .{{module.snake.many}} import {{module.pascal.single}}
"""

[[files]]
path = "src/domain/services/{{module.snake.many}}.py"
content = """
from src.databases.postgres import pgconnect
from src.domain import models
from src.domain import repositories
from src.domain import exceptions

class {{module.pascal.single}}:
    @classmethod
    async def search(cls, filters: dict, sorting: dict, pagination: dict) -> tuple[list[models.{{module.pascal.single}}], int]:
        async with pgconnect() as session:
            return await repositories.{{module.pascal.single}}.paginated(session, filters, sorting, pagination)

    @classmethod
    async def page(cls, {{module.snake.single}}_id: int) -> models.{{module.pascal.single}}:
        async with pgconnect() as session:
            return await repositories.{{module.pascal.single}}.relations(session, id={{module.snake.single}}_id)

    @classmethod
    async def create(cls, {{module.snake.single}}_id: int) -> models.{{module.pascal.single}}:
        async with pgconnect(transaction=True) as session:
            try:
                {{module.snake.single}} = await repositories.{{module.pascal.single}}.one(session, id={{module.snake.single}}_id)
            except exceptions.{{module.pascal.single}}NotFoundError:
                {{module.snake.single}} = await repositories.{{module.pascal.single}}.create(
                    session,
                    model=models.{{module.pascal.single}}.init(id={{module.snake.single}}_id),
                )
        return {{module.snake.single}}

    @classmethod
    async def delete(cls, {{module.snake.single}}_id: int) -> None:
        async with pgconnect(transaction=True) as session:
          if await repositories.{{module.pascal.single}}.exists(session, id={{module.snake.single}}_id):
             await repositories.{{module.pascal.single}}.delete(session, id={{module.snake.single}}_id)

    @classmethod
    async def update(cls, {{module.snake.single}}_id: int) -> None:
        async with pgconnect(transaction=True) as session:
            return await repositories.{{module.pascal.single}}.update(session, id={{module.snake.single}}_id)
"""


[[files]]
mode = "a"
path = "src/domain/services/__init__.py"
content = """
from .{{module.snake.many}} import {{module.pascal.single}}
"""

[[files]]
path = "src/databases/postgres/crud/{{module.snake.many}}.py"
content = """
from src.databases.postgres import tables

from .base import CRUD

class {{module.pascal.single}}(CRUD):
    table = tables.{{module.pascal.single}}
"""

[[files]]
mode = "a"
path = "src/databases/postgres/crud/__init__.py"
content = """
from .{{module.snake.many}} import {{module.pascal.single}}
"""

[[files]]
path = "src/databases/postgres/tables/{{module.snake.many}}.py"
content = """
from sqlalchemy import BigInteger
from sqlalchemy import Column

from src.databases.postgres.setup import Table

class {{module.pascal.single}}(Table):
    __tablename__ = "{{module.snake.many}}"
    id = Column(BigInteger, primary_key=True)
"""

[[files]]
mode = "a"
path = "src/databases/postgres/tables/__init__.py"
content = """
from .{{module.snake.many}} import {{module.pascal.single}}
"""

# Scripts
[[scripts]]
command = "isort ."
check = false

[[scripts]]
command = "ruff format . --no-cache"
check = false
